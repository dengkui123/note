<?xml version="1.0" encoding="UTF-8" standalone="no"?><note xmlns="http://note.youdao.com" file-version="0" schema-version="1.0.3"><head/><body><para><coId>gip6-1618558773041</coId><text>URL：统一资源标识符	 如：http://news.qq.com/a/20160209/012154.htm?a=1&amp;b=2&amp;c=3</text><inline-styles><bold><from>0</from><to>4</to><value>true</value></bold><font-size><from>0</from><to>13</to><value>16</value></font-size><color><from>4</from><to>15</to><value>#121212</value></color><back-color><from>4</from><to>15</to><value>rgb(255, 255, 255)</value></back-color><color><from>15</from><to>67</to><value>#003884</value></color><href><from>15</from><to>67</to><value>http://news.qq.com/a/20160209/012154,htm?a=1&amp;b=2&amp;c=3</value></href></inline-styles><styles/></para><para><coId>TkQl-1618560738983</coId><text/><inline-styles/><styles/></para><para><coId>5KTu-1618558797739</coId><text>url组成：protocol、hostname、port、path、parameters</text><inline-styles><bold><from>6</from><to>44</to><value>true</value></bold></inline-styles><styles><indent>0</indent><line-height>2.0124999999999997</line-height></styles></para><para><coId>oRO8-1618558889305</coId><text>protocol:协议  协议就是一套规则，定义了数据的封装、打包、拆包和解释的规则  	http://</text><inline-styles><color><from>13</from><to>52</to><value>#444444</value></color><back-color><from>13</from><to>52</to><value>rgb(255, 255, 255)</value></back-color><font-size><from>13</from><to>52</to><value>14</value></font-size><font-family><from>13</from><to>52</to><value>Arial</value></font-family></inline-styles><styles><indent>1</indent><line-height>2.0124999999999997</line-height></styles></para><para><coId>OG8m-1618558935192</coId><text>hostname:主机名  可以将主机理解为一台名叫 news.qq.com 的机器，这台主机在 qq.com 域名下。   news.qq.com</text><inline-styles><color><from>0</from><to>74</to><value>#444444</value></color><back-color><from>0</from><to>74</to><value>rgb(255, 255, 255)</value></back-color><font-size><from>0</from><to>74</to><value>14</value></font-size><font-family><from>0</from><to>74</to><value>Arial</value></font-family></inline-styles><styles><indent>1</indent><line-height>2.0124999999999997</line-height></styles></para><para><coId>FnPw-1618558987454</coId><text>post:端口号  默认80	如：http://news.qq.com:8080/	 端口号为8080</text><inline-styles><color><from>0</from><to>51</to><value>#444444</value></color><back-color><from>0</from><to>51</to><value>rgb(255, 255, 255)</value></back-color><font-size><from>0</from><to>51</to><value>14</value></font-size><font-family><from>0</from><to>51</to><value>Arial</value></font-family><underline><from>36</from><to>40</to><value>true</value></underline></inline-styles><styles><indent>1</indent><line-height>2.0124999999999997</line-height></styles></para><para><coId>CUEg-1618558801765</coId><text>path:路径  最终文件所在的路径和文件名，文件存储在服务器上	.../a/20160209/012154.htm/...</text><inline-styles><color><from>9</from><to>62</to><value>#444444</value></color><back-color><from>9</from><to>62</to><value>rgb(255, 255, 255)</value></back-color><font-size><from>9</from><to>62</to><value>14</value></font-size><font-family><from>9</from><to>62</to><value>Arial</value></font-family></inline-styles><styles><indent>1</indent><line-height>2.0124999999999997</line-height></styles></para><para><coId>yt6p-1618559119623</coId><text>parameters:查询、参数		a=1&amp;b=2&amp;c=3</text><inline-styles><color><from>0</from><to>29</to><value>#444444</value></color><back-color><from>0</from><to>29</to><value>rgb(255, 255, 255)</value></back-color><font-size><from>0</from><to>29</to><value>14</value></font-size><font-family><from>0</from><to>29</to><value>Arial</value></font-family></inline-styles><styles><indent>1</indent><line-height>2.0124999999999997</line-height></styles></para><para><coId>YCem-1618560310255</coId><text/><inline-styles/><styles><indent>1</indent><line-height>2.0124999999999997</line-height></styles></para><para><coId>mMap-1618560257247</coId><text>GET和POST区别：</text><inline-styles><color><from>0</from><to>11</to><value>#444444</value></color><back-color><from>0</from><to>11</to><value>rgb(255, 255, 255)</value></back-color><font-size><from>0</from><to>11</to><value>16</value></font-size><bold><from>0</from><to>11</to><value>true</value></bold></inline-styles><styles><indent>0</indent></styles></para><para><coId>5hKC-1618560311097</coId><text>原因：HTTP的规定和浏览器/服务器的限制，导致GET和POST有如下区别：</text><inline-styles><color><from>0</from><to>38</to><value>#494949</value></color><back-color><from>0</from><to>38</to><value>rgb(255, 255, 255)</value></back-color><font-size><from>0</from><to>38</to><value>14</value></font-size><bold><from>3</from><to>21</to><value>true</value></bold></inline-styles><styles><text-indent>0</text-indent></styles></para><para><coId>wOeV-1618560373621</coId><text>● GET在浏览器回退时是无害的，而POST会再次提交请求。 </text><inline-styles/><styles><text-indent>1</text-indent></styles></para><para><coId>kn90-1618560384388</coId><text>● GET产生的URL地址可以被Bookmark，而POST不可以。 </text><inline-styles/><styles><indent>1</indent></styles></para><para><coId>Vv6a-1618560384389</coId><text>● GET请求会被浏览器主动cache，而POST不会，除非手动设置。 </text><inline-styles/><styles><indent>1</indent></styles></para><para><coId>NVce-1618560394392</coId><text>● GET请求只能进行url编码，而POST支持多种编码方式。</text><inline-styles/><styles><indent>1</indent></styles></para><para><coId>beao-1618560384389</coId><text>● GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。 </text><inline-styles/><styles><indent>1</indent></styles></para><para><coId>0hAx-1618560384389</coId><text>● GET请求在URL中传送的参数是有长度限制的，而POST没有。</text><inline-styles/><styles><indent>1</indent></styles></para><para><coId>AHUE-1618560384389</coId><text>● 对参数的数据类型，GET只接受ASCII字符，而POST没有限制。 </text><inline-styles/><styles><indent>1</indent></styles></para><para><coId>TITf-1618560384389</coId><text>● GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。 </text><inline-styles/><styles><indent>1</indent></styles></para><para><coId>txvy-1618560384389</coId><text>● GET参数通过URL传递，POST放在Request body中。</text><inline-styles/><styles><indent>1</indent></styles></para><para><coId>3LwS-1618560730501</coId><text/><inline-styles/><styles><indent>1</indent></styles></para><para><coId>fqaG-1618560369099</coId><text>实际：GET和POST本质上就是TCP连接，并无差别。</text><inline-styles><color><from>0</from><to>27</to><value>#494949</value></color><back-color><from>0</from><to>27</to><value>rgb(255, 255, 255)</value></back-color><font-size><from>0</from><to>27</to><value>14</value></font-size></inline-styles><styles><text-indent>0</text-indent></styles></para><para><coId>o4pY-1618560590551</coId><text>GET和POST是HTTP协议中的两种发送请求的方法。 </text><inline-styles><font-family><from>0</from><to>28</to><value>SimSun</value></font-family></inline-styles><styles><indent>1</indent></styles></para><para><coId>qAwr-1618560603616</coId><text>HTTP是基于TCP/IP的关于数据在万维网中如何通信的协议。 </text><inline-styles><font-family><from>0</from><to>32</to><value>SimSun</value></font-family></inline-styles><styles><indent>1</indent></styles></para><para><coId>7cso-1618560603616</coId><text>HTTP的底层是TCP/IP，所以GET和POST的底层也是TCP/IP。</text><inline-styles><font-family><from>0</from><to>37</to><value>SimSun</value></font-family></inline-styles><styles><indent>1</indent></styles></para><para><coId>cgCk-1618560733299</coId><text/><inline-styles/><styles><indent>1</indent></styles></para><para><coId>yoNz-1618560635782</coId><text>区别：GET产生一个TCP数据包；POST产生两个TCP数据包（不一定）。</text><inline-styles><font-family><from>0</from><to>37</to><value>KaiTi_GB2312</value></font-family><bold><from>0</from><to>37</to><value>true</value></bold><font-size><from>0</from><to>2</to><value>16</value></font-size><color><from>3</from><to>37</to><value>#494949</value></color><back-color><from>3</from><to>37</to><value>rgb(255, 255, 255)</value></back-color><font-size><from>3</from><to>37</to><value>14</value></font-size></inline-styles><styles><indent>1</indent></styles></para><para><coId>vpEu-1618560759676</coId><text>对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。（火狐除外，POST只发送一次）</text><inline-styles><font-family><from>0</from><to>138</to><value>SimSun</value></font-family><color><from>11</from><to>38</to><value>#F33232</value></color><color><from>62</from><to>75</to><value>#F33232</value></color><color><from>75</from><to>92</to><value>#000000</value></color><color><from>92</from><to>103</to><value>#F33232</value></color></inline-styles><styles><indent>1</indent></styles></para><para><coId>kZcL-1618561836533</coId><text>理解：（1）如果客户端的请求头里面有这样的映射：Expect：100-continue，那么客户端先发送第一个包：请求头，并且阻塞读取服务端的回复。（2）然后服务端如果满足客户端的期望的话，会发送100continue，否则发送417.（3）客户端读取到服务器的状态行的响应码 如果是100 continue，那么客户端就得继续发送RequestBody，否则就结束请求。回到（1）这里，如果没有Expect的请求头，那么客户端不会先发送请求头的，会把请求头和RequestBody一起发送给服务器。</text><inline-styles><color><from>0</from><to>250</to><value>#222226</value></color><back-color><from>0</from><to>250</to><value>rgb(255, 255, 255)</value></back-color><font-size><from>0</from><to>250</to><value>14</value></font-size><font-family><from>0</from><to>250</to><value>KaiTi_GB2312</value></font-family></inline-styles><styles><text-indent>1</text-indent></styles></para><para><coId>qYmo-1618560998169</coId><text/><inline-styles/><styles><indent>1</indent></styles></para><para><coId>lYCl-1618560949607</coId><text>POST不能被GET取代的原因：</text><inline-styles><font-family><from>0</from><to>16</to><value>SimSun</value></font-family><bold><from>0</from><to>16</to><value>true</value></bold></inline-styles><styles><indent>1</indent></styles></para><para><coId>KKpi-1618560893226</coId><text>1、GET与POST都有自己的语义，不能随便混用</text><inline-styles><color><from>0</from><to>24</to><value>#494949</value></color><back-color><from>0</from><to>24</to><value>rgb(255, 255, 255)</value></back-color><font-size><from>0</from><to>24</to><value>14</value></font-size><font-family><from>0</from><to>24</to><value>KaiTi_GB2312</value></font-family></inline-styles><styles><text-indent>1</text-indent></styles></para><para><coId>ixb5-1618560887072</coId><text>2、在网络环境好的情况下，发一次包的时间和发两次包的时间差别基本可以无视。而在网络环境差的情况下，两次包的TCP在验证数据包完整性上，有非常大的优点。</text><inline-styles><color><from>0</from><to>75</to><value>#494949</value></color><back-color><from>0</from><to>75</to><value>rgb(255, 255, 255)</value></back-color><font-family><from>0</from><to>75</to><value>KaiTi_GB2312</value></font-family><font-size><from>0</from><to>75</to><value>14</value></font-size></inline-styles><styles><indent>1</indent></styles></para></body></note>