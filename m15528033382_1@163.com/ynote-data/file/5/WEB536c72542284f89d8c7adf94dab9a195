# **一、类和对象**
---
## **extern关键字** ##
    
如果想在多个文件之间共享const对象，必须在变量的定义之前添加extern关键字

- ## **成员变量和局部变量**

区别 | 成员变量 | 局部变量
---|---|---
类中位置不同 | 类中方法外 | 方法内或方法声明上
内存中位置不 | 堆内存  | 栈内存
生命周期不同 | 随着对象的存在而存在，随着对象的消失而消失 | 随着方法的调用而存在，随着方法的调用完毕而消失
初始化值不同 | 有默认的初始化值 | 没有默认的初始化值，必须先定义，赋值，才能使用
```
public class Phone {
    String brand;       //成员变量
    int price;
    
    //成员方法
    public void call() {
        String brand = "打电话";    //局部变量
        System.out.println("brand");
    }
```
## **this关键字**
1、this修饰的变量用于指代成员变量
    
    方法的形参如果与成员变量同名，不带this修饰的变量指的是形参，而不是成员变量
    
    方法的形参没有与成员变量同名，不带this修饰的变量指的是成员变量
    
2、this用于解决局部变量隐藏成员变量

3、this:代表所在类的对象引用
    
    记住：方法被哪个对象调用，this就代表哪个对象
    
```
package com.object;
//构造方法
public class Student {
    private String name;
    private int age;

    public Student(String name){
        this.name = name;       //形参和成员变量同名，this修饰的变量指代成员变量
    }

    public Student(int age){
        this.age = age;
    }

    public Student(String name, int age){
        this.name = name;
        this.age = age;
    }
    public void show(){
        System.out.println(name + ", " + age);
    }
}
```
## **封装**
#### 一、概述
    封装是面向对象的三大特征之一（封装、继承、多态）
    是面向对象编程语言对世界的模拟，客观世界里成员变量都是隐藏在对象内部的，外界是无法直接操作的。
#### 二、封装原则
    将类的某些信息隐藏在类内部，不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的操作和访问成员变量private，提供对应的 getXxx()/setXxx() 方法
#### 三、封装好处
    通过方法来控制成员变量的操作，提高了代码的安全性
    把代码用方法进行封装，提高了代码的复用性

```
public class Student {
    //封装
    private String name;
    private int age;

    public void setAge(int age) {
        this.age = age;
    }

    public int getAge() {
        return age;s
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

```
## **继承**

#### 一、概述
    继承是面向对象的三大特征之一。可以使得子类具有父类的属性和方法，还可以在子类中重新定义，追加属性和方法。

#### 二、格式

```
public class 子类名 extends 父类名{}
```
#### 三、范例

    public class Zi extends Fu{}
    Fu:是父类，也被称为基类、超类
    Zi:是子类，也被称为派生类
```
/*
父类
*/
public class Fu {
    public int age = 40;
}

/*
子类
*/
public class Zi extends Fu{     //继承

    public int height = 175;

    public void show() {
        System.out.println(age);
        System.out.println(height);
    }
}

/*
测试类
*/
public class TestDemo {
    public static void main(String[] args) {
        //创建对象，调用方法
        Zi z = new Zi();
        z.show();

    }
}
```

#### 四、特点
    子类可以有父类的内容
    子类还可以有自己特有的内容
    
#### 五、继承的好处和弊端
**1、好处：**
    
    提高了代码的复用性（多个类相同的成员可以放到同一个类中）
    提高了代码的维护性（如果方法的代码需要修改，修改一处即可）

**2、弊端：**
    
    继承让类与类之间产生了关系，类的耦合性增强了，当父类发生变化时子类实现也不得不跟着变化，削弱了子类的独立性