<?xml version="1.0" encoding="UTF-8" standalone="no"?><note xmlns="http://note.youdao.com" file-version="0" schema-version="1.0.3"><head><list id="list8" type="unordered"/><list id="list9" type="unordered"/><list id="list10" type="unordered"/><list id="4SFy-1614531662502" type="unordered"/><list id="pfj5-1614531696302" type="unordered"/><list id="RiPR-1614531713876" type="unordered"/></head><body><heading compat="true" level="1"><coId>SimS-1613899254939</coId><text>一、调用 .NET 类库中不同种类的方法</text><inline-styles><bold><from>0</from><to>20</to><value>true</value></bold><font-size><from>0</from><to>20</to><value>28</value></font-size></inline-styles><styles/></heading><list-item level="1" list-id="list8"><coId>0UyR-1613899306613</coId><text>若要调用 .NET 类库中类的方法，请采用ClassName.MethodName() 格式，其中 . 符号是成员访问运算符，用于访问在类中定义的方法，而 () 符号是方法调用运算符。</text><inline-styles><underline><from>21</from><to>43</to><value>true</value></underline><bold><from>49</from><to>52</to><value>true</value></bold><back-color><from>49</from><to>52</to><value>#E6E6E6</value></back-color><bold><from>77</from><to>81</to><value>true</value></bold><back-color><from>77</from><to>81</to><value>#E6E6E6</value></back-color></inline-styles><styles/></list-item><list-item level="1" list-id="list8"><coId>ezSc-1613899306613</coId><text>调用无状态方法时，无需先创建其类的新实例。</text><inline-styles/><styles/></list-item><list-item level="1" list-id="list8"><coId>07pW-1613899306613</coId><text>在调用有状态方法时，需要创建类的实例，并访问对象的方法。</text><inline-styles><bold><from>0</from><to>28</to><value>true</value></bold></inline-styles><styles/></list-item><list-item level="1" list-id="list8"><coId>naTG-1613899306613</coId><text>使用new运算符创建类的新实例。</text><inline-styles/><styles><line-height>2.0124999999999997</line-height></styles></list-item><list-item level="1" list-id="list8"><coId>Ochm-1613899306613</coId><text>类的实例称为对象。</text><inline-styles><bold><from>0</from><to>8</to><value>true</value></bold></inline-styles><styles/></list-item><code><coId>zHJa-1613899576555</coId><text>Random dice = new Random();	//实例方法（有状态方法）
int roll = dice.Next(1, 7);

Console.WriteLine(roll);		//静态方法（无状态方法）
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>FG3Z-1613899520676</coId><text>https://docs.microsoft.com/zh-cn/learn/modules/csharp-call-methods/3-call-methods</text><inline-styles><underline><from>0</from><to>81</to><value>true</value></underline><color><from>0</from><to>81</to><value>#0366d6</value></color><href><from>0</from><to>81</to><value>https://docs.microsoft.com/zh-cn/learn/modules/csharp-call-methods/3-call-methods</value></href></inline-styles><styles/></para><para><coId>O2YG-1613910469038</coId><text/><inline-styles/><styles/></para><heading compat="true" level="1"><coId>jEV0-1613910469485</coId><text>二、	处理返回值和输入参数</text><inline-styles><font-size><from>0</from><to>13</to><value>20</value></font-size><bold><from>0</from><to>13</to><value>true</value></bold></inline-styles><styles/></heading><list-item level="1" list-id="list9"><coId>pCOR-1613910482026</coId><text>方法可能不接受任何参数，也可能接收多个参数，具体取决于方法的设计和实现方式。 传入多个输入参数时，使用,  符号将其分隔开。</text><inline-styles><bold><from>51</from><to>54</to><value>true</value></bold><back-color><from>51</from><to>54</to><value>#E6E6E6</value></back-color></inline-styles><styles/></list-item><list-item level="1" list-id="list9"><coId>nKck-1613910482683</coId><text>方法在完成其任务后可能返回值，也可能不会返回任何内容 (void)。</text><inline-styles/><styles/></list-item><list-item level="1" list-id="list9"><coId>LFVq-1613910482683</coId><text>重载方法支持方法的多个实现，每个实现都具有唯一的方法签名（输入参数的数目和每个输入参数的数据类型）。</text><inline-styles><bold><from>0</from><to>50</to><value>true</value></bold></inline-styles><styles/></list-item><list-item level="1" list-id="list9"><coId>K77q-1613910482683</coId><text>Intellisense 有助于更快地编写代码。 它提供对方法、其返回值、其重载版本及其输入参数类型的快速参考。</text><inline-styles/><styles/></list-item><list-item level="1" list-id="list9"><coId>5PHa-1613910482683</coId><text>若要了解 .NET 类库中方法的工作原理，请通过 docs.microsoft.com 获取“事实来源”。</text><inline-styles/><styles/></list-item><para><coId>qWtu-1613910617592</coId><text/><inline-styles/><styles/></para><code><coId>gWMF-1613910643534</coId><text>Random dice = new Random();	//重载方法

int roll1 = dice.Next();

int roll2 = dice.Next(101);

int roll3 = dice.Next(50, 101);


Console.WriteLine($"First roll: {roll1}");

Console.WriteLine($"Second roll: {roll2}");

Console.WriteLine($"Third roll: {roll3}");


</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>JJT3-1613910643534</coId><text/><inline-styles/><styles/></para><para><coId>5Ns4-1614009348384</coId><text/><inline-styles/><styles/></para><horizontal-line><coId>eW6Y-1614009368723</coId><styles/></horizontal-line><list-item level="1" list-id="list10"><coId>6O1U-1614009368725</coId><text>C# 程序使用 类型声明 创建新类型。 类型声明指定新类型的名称和成员。 用户可定义以下六种 C# 类型：类类型、结构类型、接口类型、枚举类型、委托类型和元组值类型。</text><inline-styles><bold><from>8</from><to>12</to><value>true</value></bold><color><from>8</from><to>13</to><value>#171717</value></color><back-color><from>8</from><to>13</to><value>rgb(255, 255, 255)</value></back-color><font-family><from>12</from><to>13</to><value>Arial</value></font-family><font-size><from>12</from><to>13</to><value>16</value></font-size><bold><from>53</from><to>83</to><value>true</value></bold></inline-styles><styles/></list-item><para><coId>xlv1-1614082793467</coId><text>泛型类定义类型参数*。类型参数是用尖括号括起来的类型参数名称列表，类型参数跟在类名后面；然后，可以在类声明的主体中使用类型参数来定义类成员。在以下示例中，Pair 的类型参数是 TFirst 和 TSecond：</text><inline-styles><bold><from>5</from><to>9</to><value>true</value></bold><bold><from>11</from><to>33</to><value>true</value></bold><font-family><from>77</from><to>81</to><value>Courier New</value></font-family><font-size><from>77</from><to>81</to><value>13</value></font-size><back-color><from>77</from><to>82</to><value>#E6E6E6</value></back-color><back-color><from>89</from><to>95</to><value>#E6E6E6</value></back-color><back-color><from>98</from><to>105</to><value>#E6E6E6</value></back-color></inline-styles><styles/></para><code><coId>BchY-1614083008684</coId><text>public class Pair&lt;TFirst, TSecond&gt;

{

    public TFirst First { get; }
    public TSecond Second { get; }
    
    public Pair(TFirst first, TSecond second) =&gt; 

    	(First, Second) = (first, second);
}
</text><inline-styles><font-family><from>0</from><to>34</to><value>Courier New</value></font-family><color><from>0</from><to>6</to><value>#0101fd</value></color><back-color><from>0</from><to>34</to><value>rgb(250, 250, 250)</value></back-color><color><from>6</from><to>7</to><value>#171717</value></color><color><from>7</from><to>12</to><value>#0101fd</value></color><color><from>12</from><to>13</to><value>#171717</value></color><color><from>13</from><to>17</to><value>#007d9a</value></color><color><from>17</from><to>18</to><value>#171717</value></color><color><from>18</from><to>24</to><value>#007d9a</value></color><color><from>24</from><to>26</to><value>#171717</value></color><color><from>26</from><to>33</to><value>#007d9a</value></color><color><from>33</from><to>34</to><value>#171717</value></color><font-family><from>36</from><to>37</to><value>Courier New</value></font-family><color><from>36</from><to>37</to><value>#171717</value></color><back-color><from>36</from><to>37</to><value>rgb(250, 250, 250)</value></back-color><font-family><from>43</from><to>71</to><value>Courier New</value></font-family><color><from>43</from><to>49</to><value>#0101fd</value></color><back-color><from>43</from><to>71</to><value>rgb(250, 250, 250)</value></back-color><color><from>49</from><to>65</to><value>#171717</value></color><color><from>65</from><to>68</to><value>#0101fd</value></color><color><from>68</from><to>71</to><value>#171717</value></color><font-family><from>76</from><to>106</to><value>Courier New</value></font-family><color><from>76</from><to>82</to><value>#0101fd</value></color><back-color><from>76</from><to>106</to><value>rgb(250, 250, 250)</value></back-color><color><from>82</from><to>100</to><value>#171717</value></color><color><from>100</from><to>103</to><value>#0101fd</value></color><color><from>103</from><to>106</to><value>#171717</value></color><font-family><from>107</from><to>111</to><value>Courier New</value></font-family><color><from>107</from><to>111</to><value>#171717</value></color><back-color><from>107</from><to>111</to><value>rgb(250, 250, 250)</value></back-color><font-family><from>116</from><to>161</to><value>Courier New</value></font-family><color><from>116</from><to>122</to><value>#0101fd</value></color><back-color><from>116</from><to>161</to><value>rgb(250, 250, 250)</value></back-color><color><from>122</from><to>123</to><value>#171717</value></color><color><from>123</from><to>127</to><value>#007d9a</value></color><color><from>127</from><to>161</to><value>#171717</value></color><font-family><from>168</from><to>202</to><value>Courier New</value></font-family><color><from>168</from><to>202</to><value>#171717</value></color><back-color><from>168</from><to>202</to><value>rgb(250, 250, 250)</value></back-color><font-family><from>203</from><to>204</to><value>Courier New</value></font-family><color><from>203</from><to>204</to><value>#171717</value></color><back-color><from>203</from><to>204</to><value>rgb(250, 250, 250)</value></back-color></inline-styles><styles/><language>javascript</language><theme>default</theme></code><heading compat="true" level="1"><coId>20epag1614417852958</coId><text>三、类和对象</text><inline-styles><bold><from>0</from><to>6</to><value>true</value></bold><font-size><from>0</from><to>6</to><value>28</value></font-size></inline-styles><styles/></heading><list-item level="1" list-id="4SFy-1614531662502"><coId>40iifc1614417896586</coId><text>类定义的具体语法形式：</text><inline-styles><bold><from>0</from><to>11</to><value>true</value></bold></inline-styles><styles><padding>none</padding><back-color>transparent</back-color></styles></list-item><code><coId>YopY-1614531590427</coId><text>/*类的访问修饰符 修饰符    类名
{
类的成员
}
*/
public static class Test
{
...
}
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><list-item level="1" list-id="pfj5-1614531696302"><coId>85tvef1614418622652</coId><text>类中成员定义字段的语法形式：</text><inline-styles><bold><from>0</from><to>14</to><value>true</value></bold></inline-styles><styles/></list-item><code><coId>zAsz-1614531706130</coId><text>//访问修饰符    修饰符    数据类型    字段名；
private static int id
internal static int age
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><list-item level="1" list-id="RiPR-1614531713876"><coId>76kxmg1614419335050</coId><text>定义方法的语法形式：</text><inline-styles><bold><from>0</from><to>10</to><value>true</value></bold></inline-styles><styles/></list-item><code><coId>ApyZ-1614531726945</coId><text>访问修饰符    修饰符    返回值类型    方法名（参数列表）
{
语句块；
}
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><heading compat="true" level="2"><coId>28tdaw1614419373980</coId><text>构造方法：</text><inline-styles><font-size><from>0</from><to>5</to><value>18</value></font-size><bold><from>0</from><to>5</to><value>true</value></bold></inline-styles><styles/></heading><code><coId>jyUt-1614531882708</coId><text>class User
{
    //创建构造方法
    public User(string name, string password, string tel)
    {
        this.Name = name;
        this.Password = password;
        this.Tel = tel;
    }
    //定义属性
    public string Name { get; set; }
    public string Password { get; set; }
    public string Tel { get; set; }
    //创建方法
    public void PrintMsg()
    {
        Console.WriteLine("用户名：" + this.Name);
        Console.WriteLine("密码：" + this.Password);
        Console.WriteLine("手机号：" + this.Tel);
    }
}
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>5inkd1614503089490</coId><text/><inline-styles/><styles/></para><para><coId>9jmak1614503076933</coId><text>构造方法的重载：</text><inline-styles><bold><from>0</from><to>8</to><value>true</value></bold><font-size><from>0</from><to>8</to><value>18</value></font-size></inline-styles><styles/></para><code><coId>CFA0-1614532043831</coId><text>class SayHello
{
    public SayHello()
    {
        Console.WriteLine("Hello");
    }
    public SayHello(string name)
    {
        Console.WriteLine("Hello " + name);
    }
    public SayHello(string name, int age)
    {
        Console.WriteLine("Hello " + name + "，" + age);
    }
}

class Program
{
    static void Main(string[] args)
    {
        //调用构造方法
        SayHello say1 = new SayHello();
        SayHello say2 = new SayHello("dengkui");
        SayHello say3 = new SayHello("dengkui", 23);
    }
}

</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>Fkyw-1614532043831</coId><text>结构体：</text><inline-styles><color><from>0</from><to>4</to><value>#444444</value></color><back-color><from>0</from><to>4</to><value>rgb(255, 255, 255)</value></back-color><font-size><from>0</from><to>4</to><value>18</value></font-size><bold><from>0</from><to>4</to><value>true</value></bold></inline-styles><styles/></para><para><coId>pSsn-1614690610658</coId><text>在结构体中能定义字段、属性、方法等成员。定义的语法形式如下。</text><inline-styles><color><from>0</from><to>30</to><value>#444444</value></color><back-color><from>0</from><to>30</to><value>rgb(255, 255, 255)</value></back-color><font-size><from>0</from><to>30</to><value>14</value></font-size><font-family><from>0</from><to>30</to><value>Arial</value></font-family></inline-styles><styles/></para><code><coId>eh6O-1614690580046</coId><text>访问修饰符  struct  结构体名称
{    
    //结构体成员
}  
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>SELO-1614690580046</coId><text>结构体和类的区别：</text><inline-styles><bold><from>0</from><to>9</to><value>true</value></bold></inline-styles><styles/></para><table><coId>Z7yq-1614690651864</coId><resource-list/><content>{"cells":[{"backColor":"#C2E2FF","textAlign":"center","value":"结构体","inlineStyles":{"color":[{"from":0,"to":3,"value":"#000000"}],"back-color":[{"from":0,"to":3,"value":true}],"bold":[{"from":0,"to":3,"value":true}]}},{"backColor":"#C2E2FF","textAlign":"center","value":"类","inlineStyles":{"color":[{"from":0,"to":1,"value":"#000000"}],"bold":[{"from":0,"to":1,"value":true}]}},{"value":"允许不使用new对其实例化 "},{"value":"必须使用new实例化"},{"value":"没有默认构造方法","inlineStyles":{"color":[{"from":0,"to":8,"value":"#444444"}],"back-color":[{"from":0,"to":8,"value":"rgb(255, 255, 255)"}],"font-size":[{"from":0,"to":8,"value":14}],"font-family":[{"from":0,"to":8,"value":"Arial"}]}},{"value":"有默认构造方法","inlineStyles":{"color":[{"from":0,"to":7,"value":"#444444"}],"back-color":[{"from":0,"to":7,"value":"rgb(255, 255, 255)"}],"font-size":[{"from":0,"to":7,"value":14}],"font-family":[{"from":0,"to":7,"value":"Arial"}]}},{"value":"不能继承类 ","inlineStyles":{"color":[{"from":0,"to":6,"value":"#444444"}],"back-color":[{"from":0,"to":6,"value":"rgb(255, 255, 255)"}],"font-size":[{"from":0,"to":6,"value":14}],"font-family":[{"from":0,"to":6,"value":"Arial"}]}},{"value":"能继承类"},{"value":"没有析构方法","inlineStyles":{"color":[{"from":0,"to":6,"value":"#444444"}],"back-color":[{"from":0,"to":6,"value":"rgb(255, 255, 255)"}],"font-size":[{"from":0,"to":6,"value":14}],"font-family":[{"from":0,"to":6,"value":"Arial"}]}},{"value":"有析构方法","inlineStyles":{"color":[{"from":0,"to":5,"value":"#444444"}],"back-color":[{"from":0,"to":5,"value":"rgb(255, 255, 255)"}],"font-size":[{"from":0,"to":5,"value":14}],"font-family":[{"from":0,"to":5,"value":"Arial"}]}},{"value":"不允许使用abstract、protected以及sealed修饰","inlineStyles":{"color":[{"from":0,"to":33,"value":"#444444"}],"back-color":[{"from":0,"to":33,"value":"rgb(255, 255, 255)"}],"font-size":[{"from":0,"to":33,"value":14}],"font-family":[{"from":0,"to":33,"value":"Arial"}]}},{"value":"允许使用abstract、protected以及sealed修饰","inlineStyles":{"color":[{"from":0,"to":32,"value":"#444444"}],"back-color":[{"from":0,"to":32,"value":"rgb(255, 255, 255)"}],"font-size":[{"from":0,"to":32,"value":14}],"font-family":[{"from":0,"to":32,"value":"Arial"}]}}],"heights":[40,40,40,40,40,40],"widths":[331,331]}</content><styles/></table><para><coId>LNOy-1614690651869</coId><text/><inline-styles/><styles><text-indent>1</text-indent></styles></para></body></note>